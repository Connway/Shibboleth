# GNU Make project makefile autogenerated by Premake

ifndef config
  config=debug_x64
endif

ifndef verbose
  SILENT = @
endif

.PHONY: clean prebuild prelink

ifeq ($(config),debug_x64)
  RESCOMP = windres
  TARGETDIR = ../../../../build/windows/gmake/output/x64/Debug
  TARGET = $(TARGETDIR)/wxXRC64d.dll
  OBJDIR = ../../../../build/windows/gmake/intermediate/x64/Debug/wxXRC
  DEFINES += -DUNICODE -D_UNICODE -DEA_COMPILER_NO_RTTI -D_DEBUG -DDEBUG -DWIN32 -D_WINDOWS -DWIN64 -DNOPCH -DWXBUILDING -DwxUSE_ZLIB_H_IN_PATH -D_CRT_SECURE_NO_DEPRECATE=1 -D_CRT_NON_CONFORMING_SWPRINTFS=1 -D_SCL_SECURE_NO_WARNINGS=1 -DXML_STATIC -DWXMAKINGDLL_XRC -DWXUSINGDLL -D__WXMSW__
  INCLUDES += -I../../../../../src/Dependencies/wxWidgets/include -I../../../../../src/Dependencies/wxWidgets/include/msvc
  FORCE_INCLUDE +=
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -ffast-math -Og -g -Wall -Wextra
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -ffast-math -Og -g -Wall -Wextra -std=c++1z -fno-rtti
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += ../../../../build/windows/gmake/output/x64/Debug/Engine.lib ../../../../build/windows/gmake/output/x64/Debug/Memory64d.lib ../../../../build/windows/gmake/output/x64/Debug/wxBase64d.lib ../../../../build/windows/gmake/output/x64/Debug/wxCore64d.lib ../../../../build/windows/gmake/output/x64/Debug/wxAdv64d.lib ../../../../build/windows/gmake/output/x64/Debug/wxHTML64d.lib ../../../../build/windows/gmake/output/x64/Debug/wxXML64d.lib
  LDDEPS += ../../../../build/windows/gmake/output/x64/Debug/Engine.lib ../../../../build/windows/gmake/output/x64/Debug/Memory64d.lib ../../../../build/windows/gmake/output/x64/Debug/wxBase64d.lib ../../../../build/windows/gmake/output/x64/Debug/wxCore64d.lib ../../../../build/windows/gmake/output/x64/Debug/wxAdv64d.lib ../../../../build/windows/gmake/output/x64/Debug/wxHTML64d.lib ../../../../build/windows/gmake/output/x64/Debug/wxXML64d.lib
  ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib64 -m64 -shared -Wl,--out-implib="../../../../build/windows/gmake/output/x64/Debug/wxXRC64d.lib"
  LINKCMD = $(CXX) -o "$@" $(OBJECTS) $(RESOURCES) $(ALL_LDFLAGS) $(LIBS)
  define PREBUILDCMDS
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
	@echo Running postbuild commands
	IF NOT EXIST ..\..\..\..\..\workingdir\bin (mkdir ..\..\..\..\..\workingdir\bin)
	IF EXIST ..\..\..\..\build\windows\gmake\output\x64\Debug\wxXRC64d.dll\ (xcopy /Q /E /Y /I ..\..\..\..\build\windows\gmake\output\x64\Debug\wxXRC64d.dll ..\..\..\..\..\workingdir\bin > nul) ELSE (xcopy /Q /Y /I ..\..\..\..\build\windows\gmake\output\x64\Debug\wxXRC64d.dll ..\..\..\..\..\workingdir\bin > nul)
  endef
all: prebuild prelink $(TARGET)
	@:

endif

ifeq ($(config),release_x64)
  RESCOMP = windres
  TARGETDIR = ../../../../build/windows/gmake/output/x64/Release
  TARGET = $(TARGETDIR)/wxXRC64.dll
  OBJDIR = ../../../../build/windows/gmake/intermediate/x64/Release/wxXRC
  DEFINES += -DUNICODE -D_UNICODE -DEA_COMPILER_NO_RTTI -DNDEBUG -DWIN32 -D_WINDOWS -DWIN64 -DNOPCH -DWXBUILDING -DwxUSE_ZLIB_H_IN_PATH -D_CRT_SECURE_NO_DEPRECATE=1 -D_CRT_NON_CONFORMING_SWPRINTFS=1 -D_SCL_SECURE_NO_WARNINGS=1 -DXML_STATIC -DWXMAKINGDLL_XRC -DWXUSINGDLL -D__WXMSW__
  INCLUDES += -I../../../../../src/Dependencies/wxWidgets/include -I../../../../../src/Dependencies/wxWidgets/include/msvc
  FORCE_INCLUDE +=
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -flto -ffast-math -O3 -g -Wall -Wextra
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -flto -ffast-math -O3 -g -Wall -Wextra -std=c++1z -fno-rtti
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += ../../../../build/windows/gmake/output/x64/Release/Engine.lib ../../../../build/windows/gmake/output/x64/Release/Memory64.lib ../../../../build/windows/gmake/output/x64/Release/wxBase64.lib ../../../../build/windows/gmake/output/x64/Release/wxCore64.lib ../../../../build/windows/gmake/output/x64/Release/wxAdv64.lib ../../../../build/windows/gmake/output/x64/Release/wxHTML64.lib ../../../../build/windows/gmake/output/x64/Release/wxXML64.lib
  LDDEPS += ../../../../build/windows/gmake/output/x64/Release/Engine.lib ../../../../build/windows/gmake/output/x64/Release/Memory64.lib ../../../../build/windows/gmake/output/x64/Release/wxBase64.lib ../../../../build/windows/gmake/output/x64/Release/wxCore64.lib ../../../../build/windows/gmake/output/x64/Release/wxAdv64.lib ../../../../build/windows/gmake/output/x64/Release/wxHTML64.lib ../../../../build/windows/gmake/output/x64/Release/wxXML64.lib
  ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib64 -m64 -flto -shared -Wl,--out-implib="../../../../build/windows/gmake/output/x64/Release/wxXRC64.lib"
  LINKCMD = $(CXX) -o "$@" $(OBJECTS) $(RESOURCES) $(ALL_LDFLAGS) $(LIBS)
  define PREBUILDCMDS
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
	@echo Running postbuild commands
	IF NOT EXIST ..\..\..\..\..\workingdir\bin (mkdir ..\..\..\..\..\workingdir\bin)
	IF EXIST ..\..\..\..\build\windows\gmake\output\x64\Release\wxXRC64.dll\ (xcopy /Q /E /Y /I ..\..\..\..\build\windows\gmake\output\x64\Release\wxXRC64.dll ..\..\..\..\..\workingdir\bin > nul) ELSE (xcopy /Q /Y /I ..\..\..\..\build\windows\gmake\output\x64\Release\wxXRC64.dll ..\..\..\..\..\workingdir\bin > nul)
  endef
all: prebuild prelink $(TARGET)
	@:

endif

ifeq ($(config),debug_clang_x64)
  ifeq ($(origin CC), default)
    CC = clang
  endif
  ifeq ($(origin CXX), default)
    CXX = clang++
  endif
  ifeq ($(origin AR), default)
    AR = ar
  endif
  TARGETDIR = ../../../../build/windows/gmake/output/x64/Debug_Clang
  TARGET = $(TARGETDIR)/wxXRC64d.dll
  OBJDIR = ../../../../build/windows/gmake/intermediate/x64/Debug_Clang/wxXRC
  DEFINES += -DUNICODE -D_UNICODE -DEA_COMPILER_NO_RTTI -D_DEBUG -DDEBUG -DWIN32 -D_WINDOWS -DWIN64 -DNOPCH -DWXBUILDING -DwxUSE_ZLIB_H_IN_PATH -D_CRT_SECURE_NO_DEPRECATE=1 -D_CRT_NON_CONFORMING_SWPRINTFS=1 -D_SCL_SECURE_NO_WARNINGS=1 -DXML_STATIC -DWXMAKINGDLL_XRC -DWXUSINGDLL -D__WXMSW__
  INCLUDES += -I../../../../../src/Dependencies/wxWidgets/include -I../../../../../src/Dependencies/wxWidgets/include/msvc
  FORCE_INCLUDE +=
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -ffast-math -O0 -g -Wall -Wextra
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -ffast-math -O0 -g -Wall -Wextra -std=c++1z -fno-rtti
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += ../../../../build/windows/gmake/output/x64/Debug_Clang/Engine.lib ../../../../build/windows/gmake/output/x64/Debug_Clang/Memory64d.lib ../../../../build/windows/gmake/output/x64/Debug_Clang/wxBase64d.lib ../../../../build/windows/gmake/output/x64/Debug_Clang/wxCore64d.lib ../../../../build/windows/gmake/output/x64/Debug_Clang/wxAdv64d.lib ../../../../build/windows/gmake/output/x64/Debug_Clang/wxHTML64d.lib ../../../../build/windows/gmake/output/x64/Debug_Clang/wxXML64d.lib
  LDDEPS += ../../../../build/windows/gmake/output/x64/Debug_Clang/Engine.lib ../../../../build/windows/gmake/output/x64/Debug_Clang/Memory64d.lib ../../../../build/windows/gmake/output/x64/Debug_Clang/wxBase64d.lib ../../../../build/windows/gmake/output/x64/Debug_Clang/wxCore64d.lib ../../../../build/windows/gmake/output/x64/Debug_Clang/wxAdv64d.lib ../../../../build/windows/gmake/output/x64/Debug_Clang/wxHTML64d.lib ../../../../build/windows/gmake/output/x64/Debug_Clang/wxXML64d.lib
  ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib64 -m64 -shared -Wl,--out-implib="../../../../build/windows/gmake/output/x64/Debug_Clang/wxXRC64d.lib"
  LINKCMD = $(CXX) -o "$@" $(OBJECTS) $(RESOURCES) $(ALL_LDFLAGS) $(LIBS)
  define PREBUILDCMDS
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
	@echo Running postbuild commands
	IF NOT EXIST ..\..\..\..\..\workingdir\bin (mkdir ..\..\..\..\..\workingdir\bin)
	IF EXIST ..\..\..\..\build\windows\gmake\output\x64\Debug_Clang\wxXRC64d.dll\ (xcopy /Q /E /Y /I ..\..\..\..\build\windows\gmake\output\x64\Debug_Clang\wxXRC64d.dll ..\..\..\..\..\workingdir\bin > nul) ELSE (xcopy /Q /Y /I ..\..\..\..\build\windows\gmake\output\x64\Debug_Clang\wxXRC64d.dll ..\..\..\..\..\workingdir\bin > nul)
  endef
all: prebuild prelink $(TARGET)
	@:

endif

ifeq ($(config),release_clang_x64)
  ifeq ($(origin CC), default)
    CC = clang
  endif
  ifeq ($(origin CXX), default)
    CXX = clang++
  endif
  ifeq ($(origin AR), default)
    AR = ar
  endif
  TARGETDIR = ../../../../build/windows/gmake/output/x64/Release_Clang
  TARGET = $(TARGETDIR)/wxXRC64.dll
  OBJDIR = ../../../../build/windows/gmake/intermediate/x64/Release_Clang/wxXRC
  DEFINES += -DUNICODE -D_UNICODE -DEA_COMPILER_NO_RTTI -DNDEBUG -DWIN32 -D_WINDOWS -DWIN64 -DNOPCH -DWXBUILDING -DwxUSE_ZLIB_H_IN_PATH -D_CRT_SECURE_NO_DEPRECATE=1 -D_CRT_NON_CONFORMING_SWPRINTFS=1 -D_SCL_SECURE_NO_WARNINGS=1 -DXML_STATIC -DWXMAKINGDLL_XRC -DWXUSINGDLL -D__WXMSW__
  INCLUDES += -I../../../../../src/Dependencies/wxWidgets/include -I../../../../../src/Dependencies/wxWidgets/include/msvc
  FORCE_INCLUDE +=
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -flto -ffast-math -O3 -g -Wall -Wextra
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -flto -ffast-math -O3 -g -Wall -Wextra -std=c++1z -fno-rtti
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += ../../../../build/windows/gmake/output/x64/Release_Clang/Engine.lib ../../../../build/windows/gmake/output/x64/Release_Clang/Memory64.lib ../../../../build/windows/gmake/output/x64/Release_Clang/wxBase64.lib ../../../../build/windows/gmake/output/x64/Release_Clang/wxCore64.lib ../../../../build/windows/gmake/output/x64/Release_Clang/wxAdv64.lib ../../../../build/windows/gmake/output/x64/Release_Clang/wxHTML64.lib ../../../../build/windows/gmake/output/x64/Release_Clang/wxXML64.lib
  LDDEPS += ../../../../build/windows/gmake/output/x64/Release_Clang/Engine.lib ../../../../build/windows/gmake/output/x64/Release_Clang/Memory64.lib ../../../../build/windows/gmake/output/x64/Release_Clang/wxBase64.lib ../../../../build/windows/gmake/output/x64/Release_Clang/wxCore64.lib ../../../../build/windows/gmake/output/x64/Release_Clang/wxAdv64.lib ../../../../build/windows/gmake/output/x64/Release_Clang/wxHTML64.lib ../../../../build/windows/gmake/output/x64/Release_Clang/wxXML64.lib
  ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib64 -m64 -flto -shared -Wl,--out-implib="../../../../build/windows/gmake/output/x64/Release_Clang/wxXRC64.lib"
  LINKCMD = $(CXX) -o "$@" $(OBJECTS) $(RESOURCES) $(ALL_LDFLAGS) $(LIBS)
  define PREBUILDCMDS
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
	@echo Running postbuild commands
	IF NOT EXIST ..\..\..\..\..\workingdir\bin (mkdir ..\..\..\..\..\workingdir\bin)
	IF EXIST ..\..\..\..\build\windows\gmake\output\x64\Release_Clang\wxXRC64.dll\ (xcopy /Q /E /Y /I ..\..\..\..\build\windows\gmake\output\x64\Release_Clang\wxXRC64.dll ..\..\..\..\..\workingdir\bin > nul) ELSE (xcopy /Q /Y /I ..\..\..\..\build\windows\gmake\output\x64\Release_Clang\wxXRC64.dll ..\..\..\..\..\workingdir\bin > nul)
  endef
all: prebuild prelink $(TARGET)
	@:

endif

ifeq ($(config),profile_x64)
  RESCOMP = windres
  TARGETDIR = ../../../../build/windows/gmake/output/x64/Profile
  TARGET = $(TARGETDIR)/wxXRC64p.dll
  OBJDIR = ../../../../build/windows/gmake/intermediate/x64/Profile/wxXRC
  DEFINES += -DUNICODE -D_UNICODE -DEA_COMPILER_NO_RTTI -DNDEBUG -DSHIB_PROFILE -DWIN32 -D_WINDOWS -DWIN64 -DNOPCH -DWXBUILDING -DwxUSE_ZLIB_H_IN_PATH -D_CRT_SECURE_NO_DEPRECATE=1 -D_CRT_NON_CONFORMING_SWPRINTFS=1 -D_SCL_SECURE_NO_WARNINGS=1 -DXML_STATIC -DWXMAKINGDLL_XRC -DWXUSINGDLL -D__WXMSW__
  INCLUDES += -I../../../../../src/Dependencies/wxWidgets/include -I../../../../../src/Dependencies/wxWidgets/include/msvc
  FORCE_INCLUDE +=
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -flto -ffast-math -O3 -g -Wall -Wextra
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -flto -ffast-math -O3 -g -Wall -Wextra -std=c++1z -fno-rtti
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += ../../../../build/windows/gmake/output/x64/Profile/Engine.lib ../../../../build/windows/gmake/output/x64/Profile/Memory64p.lib ../../../../build/windows/gmake/output/x64/Profile/wxBase64p.lib ../../../../build/windows/gmake/output/x64/Profile/wxCore64p.lib ../../../../build/windows/gmake/output/x64/Profile/wxAdv64p.lib ../../../../build/windows/gmake/output/x64/Profile/wxHTML64p.lib ../../../../build/windows/gmake/output/x64/Profile/wxXML64p.lib
  LDDEPS += ../../../../build/windows/gmake/output/x64/Profile/Engine.lib ../../../../build/windows/gmake/output/x64/Profile/Memory64p.lib ../../../../build/windows/gmake/output/x64/Profile/wxBase64p.lib ../../../../build/windows/gmake/output/x64/Profile/wxCore64p.lib ../../../../build/windows/gmake/output/x64/Profile/wxAdv64p.lib ../../../../build/windows/gmake/output/x64/Profile/wxHTML64p.lib ../../../../build/windows/gmake/output/x64/Profile/wxXML64p.lib
  ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib64 -m64 -flto -shared -Wl,--out-implib="../../../../build/windows/gmake/output/x64/Profile/wxXRC64p.lib"
  LINKCMD = $(CXX) -o "$@" $(OBJECTS) $(RESOURCES) $(ALL_LDFLAGS) $(LIBS)
  define PREBUILDCMDS
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
	@echo Running postbuild commands
	IF NOT EXIST ..\..\..\..\..\workingdir\bin (mkdir ..\..\..\..\..\workingdir\bin)
	IF EXIST ..\..\..\..\build\windows\gmake\output\x64\Profile\wxXRC64p.dll\ (xcopy /Q /E /Y /I ..\..\..\..\build\windows\gmake\output\x64\Profile\wxXRC64p.dll ..\..\..\..\..\workingdir\bin > nul) ELSE (xcopy /Q /Y /I ..\..\..\..\build\windows\gmake\output\x64\Profile\wxXRC64p.dll ..\..\..\..\..\workingdir\bin > nul)
  endef
all: prebuild prelink $(TARGET)
	@:

endif

ifeq ($(config),profile_clang_x64)
  ifeq ($(origin CC), default)
    CC = clang
  endif
  ifeq ($(origin CXX), default)
    CXX = clang++
  endif
  ifeq ($(origin AR), default)
    AR = ar
  endif
  TARGETDIR = ../../../../build/windows/gmake/output/x64/Profile_Clang
  TARGET = $(TARGETDIR)/wxXRC64p.dll
  OBJDIR = ../../../../build/windows/gmake/intermediate/x64/Profile_Clang/wxXRC
  DEFINES += -DUNICODE -D_UNICODE -DEA_COMPILER_NO_RTTI -DNDEBUG -DWIN32 -D_WINDOWS -DWIN64 -DNOPCH -DWXBUILDING -DwxUSE_ZLIB_H_IN_PATH -D_CRT_SECURE_NO_DEPRECATE=1 -D_CRT_NON_CONFORMING_SWPRINTFS=1 -D_SCL_SECURE_NO_WARNINGS=1 -DXML_STATIC -DWXMAKINGDLL_XRC -DWXUSINGDLL -D__WXMSW__
  INCLUDES += -I../../../../../src/Dependencies/wxWidgets/include -I../../../../../src/Dependencies/wxWidgets/include/msvc
  FORCE_INCLUDE +=
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -flto -ffast-math -O3 -g -Wall -Wextra
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -flto -ffast-math -O3 -g -Wall -Wextra -std=c++1z -fno-rtti
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += ../../../../build/windows/gmake/output/x64/Profile_Clang/Engine.lib ../../../../build/windows/gmake/output/x64/Profile_Clang/Memory64p.lib ../../../../build/windows/gmake/output/x64/Profile_Clang/wxBase64p.lib ../../../../build/windows/gmake/output/x64/Profile_Clang/wxCore64p.lib ../../../../build/windows/gmake/output/x64/Profile_Clang/wxAdv64p.lib ../../../../build/windows/gmake/output/x64/Profile_Clang/wxHTML64p.lib ../../../../build/windows/gmake/output/x64/Profile_Clang/wxXML64p.lib
  LDDEPS += ../../../../build/windows/gmake/output/x64/Profile_Clang/Engine.lib ../../../../build/windows/gmake/output/x64/Profile_Clang/Memory64p.lib ../../../../build/windows/gmake/output/x64/Profile_Clang/wxBase64p.lib ../../../../build/windows/gmake/output/x64/Profile_Clang/wxCore64p.lib ../../../../build/windows/gmake/output/x64/Profile_Clang/wxAdv64p.lib ../../../../build/windows/gmake/output/x64/Profile_Clang/wxHTML64p.lib ../../../../build/windows/gmake/output/x64/Profile_Clang/wxXML64p.lib
  ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib64 -m64 -flto -shared -Wl,--out-implib="../../../../build/windows/gmake/output/x64/Profile_Clang/wxXRC64p.lib"
  LINKCMD = $(CXX) -o "$@" $(OBJECTS) $(RESOURCES) $(ALL_LDFLAGS) $(LIBS)
  define PREBUILDCMDS
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
	@echo Running postbuild commands
	IF NOT EXIST ..\..\..\..\..\workingdir\bin (mkdir ..\..\..\..\..\workingdir\bin)
	IF EXIST ..\..\..\..\build\windows\gmake\output\x64\Profile_Clang\wxXRC64p.dll\ (xcopy /Q /E /Y /I ..\..\..\..\build\windows\gmake\output\x64\Profile_Clang\wxXRC64p.dll ..\..\..\..\..\workingdir\bin > nul) ELSE (xcopy /Q /Y /I ..\..\..\..\build\windows\gmake\output\x64\Profile_Clang\wxXRC64p.dll ..\..\..\..\..\workingdir\bin > nul)
  endef
all: prebuild prelink $(TARGET)
	@:

endif

ifeq ($(config),optimized_debug_x64)
  RESCOMP = windres
  TARGETDIR = ../../../../build/windows/gmake/output/x64/Optimized_Debug
  TARGET = $(TARGETDIR)/wxXRC64od.dll
  OBJDIR = ../../../../build/windows/gmake/intermediate/x64/Optimized_Debug/wxXRC
  DEFINES += -DUNICODE -D_UNICODE -DEA_COMPILER_NO_RTTI -D_DEBUG -DDEBUG -DWIN32 -D_WINDOWS -DWIN64 -DNOPCH -DWXBUILDING -DwxUSE_ZLIB_H_IN_PATH -D_CRT_SECURE_NO_DEPRECATE=1 -D_CRT_NON_CONFORMING_SWPRINTFS=1 -D_SCL_SECURE_NO_WARNINGS=1 -DXML_STATIC -DWXMAKINGDLL_XRC -DWXUSINGDLL -D__WXMSW__
  INCLUDES += -I../../../../../src/Dependencies/wxWidgets/include -I../../../../../src/Dependencies/wxWidgets/include/msvc
  FORCE_INCLUDE +=
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -flto -ffast-math -O3 -g -Wall -Wextra
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -flto -ffast-math -O3 -g -Wall -Wextra -std=c++1z -fno-rtti
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += ../../../../build/windows/gmake/output/x64/Optimized_Debug/Engine.lib ../../../../build/windows/gmake/output/x64/Optimized_Debug/Memory64od.lib ../../../../build/windows/gmake/output/x64/Optimized_Debug/wxBase64od.lib ../../../../build/windows/gmake/output/x64/Optimized_Debug/wxCore64od.lib ../../../../build/windows/gmake/output/x64/Optimized_Debug/wxAdv64od.lib ../../../../build/windows/gmake/output/x64/Optimized_Debug/wxHTML64od.lib ../../../../build/windows/gmake/output/x64/Optimized_Debug/wxXML64od.lib
  LDDEPS += ../../../../build/windows/gmake/output/x64/Optimized_Debug/Engine.lib ../../../../build/windows/gmake/output/x64/Optimized_Debug/Memory64od.lib ../../../../build/windows/gmake/output/x64/Optimized_Debug/wxBase64od.lib ../../../../build/windows/gmake/output/x64/Optimized_Debug/wxCore64od.lib ../../../../build/windows/gmake/output/x64/Optimized_Debug/wxAdv64od.lib ../../../../build/windows/gmake/output/x64/Optimized_Debug/wxHTML64od.lib ../../../../build/windows/gmake/output/x64/Optimized_Debug/wxXML64od.lib
  ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib64 -m64 -flto -shared -Wl,--out-implib="../../../../build/windows/gmake/output/x64/Optimized_Debug/wxXRC64od.lib"
  LINKCMD = $(CXX) -o "$@" $(OBJECTS) $(RESOURCES) $(ALL_LDFLAGS) $(LIBS)
  define PREBUILDCMDS
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
	@echo Running postbuild commands
	IF NOT EXIST ..\..\..\..\..\workingdir\bin (mkdir ..\..\..\..\..\workingdir\bin)
	IF EXIST ..\..\..\..\build\windows\gmake\output\x64\Optimized_Debug\wxXRC64od.dll\ (xcopy /Q /E /Y /I ..\..\..\..\build\windows\gmake\output\x64\Optimized_Debug\wxXRC64od.dll ..\..\..\..\..\workingdir\bin > nul) ELSE (xcopy /Q /Y /I ..\..\..\..\build\windows\gmake\output\x64\Optimized_Debug\wxXRC64od.dll ..\..\..\..\..\workingdir\bin > nul)
  endef
all: prebuild prelink $(TARGET)
	@:

endif

ifeq ($(config),optimized_debug_clang_x64)
  ifeq ($(origin CC), default)
    CC = clang
  endif
  ifeq ($(origin CXX), default)
    CXX = clang++
  endif
  ifeq ($(origin AR), default)
    AR = ar
  endif
  TARGETDIR = ../../../../build/windows/gmake/output/x64/Optimized_Debug_Clang
  TARGET = $(TARGETDIR)/wxXRC64od.dll
  OBJDIR = ../../../../build/windows/gmake/intermediate/x64/Optimized_Debug_Clang/wxXRC
  DEFINES += -DUNICODE -D_UNICODE -DEA_COMPILER_NO_RTTI -D_DEBUG -DDEBUG -DWIN32 -D_WINDOWS -DWIN64 -DNOPCH -DWXBUILDING -DwxUSE_ZLIB_H_IN_PATH -D_CRT_SECURE_NO_DEPRECATE=1 -D_CRT_NON_CONFORMING_SWPRINTFS=1 -D_SCL_SECURE_NO_WARNINGS=1 -DXML_STATIC -DWXMAKINGDLL_XRC -DWXUSINGDLL -D__WXMSW__
  INCLUDES += -I../../../../../src/Dependencies/wxWidgets/include -I../../../../../src/Dependencies/wxWidgets/include/msvc
  FORCE_INCLUDE +=
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -flto -ffast-math -O3 -g -Wall -Wextra
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -flto -ffast-math -O3 -g -Wall -Wextra -std=c++1z -fno-rtti
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += ../../../../build/windows/gmake/output/x64/Optimized_Debug_Clang/Engine.lib ../../../../build/windows/gmake/output/x64/Optimized_Debug_Clang/Memory64od.lib ../../../../build/windows/gmake/output/x64/Optimized_Debug_Clang/wxBase64od.lib ../../../../build/windows/gmake/output/x64/Optimized_Debug_Clang/wxCore64od.lib ../../../../build/windows/gmake/output/x64/Optimized_Debug_Clang/wxAdv64od.lib ../../../../build/windows/gmake/output/x64/Optimized_Debug_Clang/wxHTML64od.lib ../../../../build/windows/gmake/output/x64/Optimized_Debug_Clang/wxXML64od.lib
  LDDEPS += ../../../../build/windows/gmake/output/x64/Optimized_Debug_Clang/Engine.lib ../../../../build/windows/gmake/output/x64/Optimized_Debug_Clang/Memory64od.lib ../../../../build/windows/gmake/output/x64/Optimized_Debug_Clang/wxBase64od.lib ../../../../build/windows/gmake/output/x64/Optimized_Debug_Clang/wxCore64od.lib ../../../../build/windows/gmake/output/x64/Optimized_Debug_Clang/wxAdv64od.lib ../../../../build/windows/gmake/output/x64/Optimized_Debug_Clang/wxHTML64od.lib ../../../../build/windows/gmake/output/x64/Optimized_Debug_Clang/wxXML64od.lib
  ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib64 -m64 -flto -shared -Wl,--out-implib="../../../../build/windows/gmake/output/x64/Optimized_Debug_Clang/wxXRC64od.lib"
  LINKCMD = $(CXX) -o "$@" $(OBJECTS) $(RESOURCES) $(ALL_LDFLAGS) $(LIBS)
  define PREBUILDCMDS
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
	@echo Running postbuild commands
	IF NOT EXIST ..\..\..\..\..\workingdir\bin (mkdir ..\..\..\..\..\workingdir\bin)
	IF EXIST ..\..\..\..\build\windows\gmake\output\x64\Optimized_Debug_Clang\wxXRC64od.dll\ (xcopy /Q /E /Y /I ..\..\..\..\build\windows\gmake\output\x64\Optimized_Debug_Clang\wxXRC64od.dll ..\..\..\..\..\workingdir\bin > nul) ELSE (xcopy /Q /Y /I ..\..\..\..\build\windows\gmake\output\x64\Optimized_Debug_Clang\wxXRC64od.dll ..\..\..\..\..\workingdir\bin > nul)
  endef
all: prebuild prelink $(TARGET)
	@:

endif

OBJECTS := \
	$(OBJDIR)/dummy.o \
	$(OBJDIR)/xh_animatctrl.o \
	$(OBJDIR)/xh_bannerwindow.o \
	$(OBJDIR)/xh_bmp.o \
	$(OBJDIR)/xh_bmpbt.o \
	$(OBJDIR)/xh_bmpcbox.o \
	$(OBJDIR)/xh_bttn.o \
	$(OBJDIR)/xh_cald.o \
	$(OBJDIR)/xh_chckb.o \
	$(OBJDIR)/xh_chckl.o \
	$(OBJDIR)/xh_choic.o \
	$(OBJDIR)/xh_choicbk.o \
	$(OBJDIR)/xh_clrpicker.o \
	$(OBJDIR)/xh_cmdlinkbn.o \
	$(OBJDIR)/xh_collpane.o \
	$(OBJDIR)/xh_combo.o \
	$(OBJDIR)/xh_comboctrl.o \
	$(OBJDIR)/xh_datectrl.o \
	$(OBJDIR)/xh_dirpicker.o \
	$(OBJDIR)/xh_dlg.o \
	$(OBJDIR)/xh_editlbox.o \
	$(OBJDIR)/xh_filectrl.o \
	$(OBJDIR)/xh_filepicker.o \
	$(OBJDIR)/xh_fontpicker.o \
	$(OBJDIR)/xh_frame.o \
	$(OBJDIR)/xh_gauge.o \
	$(OBJDIR)/xh_gdctl.o \
	$(OBJDIR)/xh_grid.o \
	$(OBJDIR)/xh_html.o \
	$(OBJDIR)/xh_htmllbox.o \
	$(OBJDIR)/xh_hyperlink.o \
	$(OBJDIR)/xh_listb.o \
	$(OBJDIR)/xh_listbk.o \
	$(OBJDIR)/xh_listc.o \
	$(OBJDIR)/xh_mdi.o \
	$(OBJDIR)/xh_menu.o \
	$(OBJDIR)/xh_notbk.o \
	$(OBJDIR)/xh_odcombo.o \
	$(OBJDIR)/xh_panel.o \
	$(OBJDIR)/xh_propdlg.o \
	$(OBJDIR)/xh_radbt.o \
	$(OBJDIR)/xh_radbx.o \
	$(OBJDIR)/xh_scrol.o \
	$(OBJDIR)/xh_scwin.o \
	$(OBJDIR)/xh_simplebook.o \
	$(OBJDIR)/xh_sizer.o \
	$(OBJDIR)/xh_slidr.o \
	$(OBJDIR)/xh_spin.o \
	$(OBJDIR)/xh_split.o \
	$(OBJDIR)/xh_srchctrl.o \
	$(OBJDIR)/xh_statbar.o \
	$(OBJDIR)/xh_stbmp.o \
	$(OBJDIR)/xh_stbox.o \
	$(OBJDIR)/xh_stlin.o \
	$(OBJDIR)/xh_sttxt.o \
	$(OBJDIR)/xh_text.o \
	$(OBJDIR)/xh_tglbtn.o \
	$(OBJDIR)/xh_timectrl.o \
	$(OBJDIR)/xh_toolb.o \
	$(OBJDIR)/xh_toolbk.o \
	$(OBJDIR)/xh_tree.o \
	$(OBJDIR)/xh_treebk.o \
	$(OBJDIR)/xh_unkwn.o \
	$(OBJDIR)/xh_wizrd.o \
	$(OBJDIR)/xmladv.o \
	$(OBJDIR)/xmlres.o \
	$(OBJDIR)/xmlrsall.o \

RESOURCES := \

CUSTOMFILES := \

SHELLTYPE := msdos
ifeq (,$(ComSpec)$(COMSPEC))
  SHELLTYPE := posix
endif
ifeq (/bin,$(findstring /bin,$(SHELL)))
  SHELLTYPE := posix
endif

$(TARGET): $(GCH) ${CUSTOMFILES} $(OBJECTS) $(LDDEPS) $(RESOURCES)
	@echo Linking wxXRC
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(TARGETDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(TARGETDIR))
endif
	$(SILENT) $(LINKCMD)
	$(POSTBUILDCMDS)

clean:
	@echo Cleaning wxXRC
ifeq (posix,$(SHELLTYPE))
	$(SILENT) rm -f  $(TARGET)
	$(SILENT) rm -rf $(OBJDIR)
else
	$(SILENT) if exist $(subst /,\\,$(TARGET)) del $(subst /,\\,$(TARGET))
	$(SILENT) if exist $(subst /,\\,$(OBJDIR)) rmdir /s /q $(subst /,\\,$(OBJDIR))
endif

prebuild:
	$(PREBUILDCMDS)

prelink:
	$(PRELINKCMDS)

ifneq (,$(PCH))
$(OBJECTS): $(GCH) $(PCH)
$(GCH): $(PCH)
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) -x c++-header $(ALL_CXXFLAGS) -o "$@" -MF "$(@:%.gch=%.d)" -c "$<"
endif

$(OBJDIR)/dummy.o: ../../../../../src/Dependencies/wxWidgets/src/common/dummy.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_animatctrl.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_animatctrl.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_bannerwindow.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_bannerwindow.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_bmp.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_bmp.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_bmpbt.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_bmpbt.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_bmpcbox.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_bmpcbox.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_bttn.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_bttn.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_cald.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_cald.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_chckb.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_chckb.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_chckl.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_chckl.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_choic.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_choic.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_choicbk.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_choicbk.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_clrpicker.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_clrpicker.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_cmdlinkbn.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_cmdlinkbn.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_collpane.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_collpane.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_combo.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_combo.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_comboctrl.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_comboctrl.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_datectrl.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_datectrl.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_dirpicker.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_dirpicker.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_dlg.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_dlg.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_editlbox.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_editlbox.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_filectrl.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_filectrl.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_filepicker.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_filepicker.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_fontpicker.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_fontpicker.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_frame.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_frame.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_gauge.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_gauge.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_gdctl.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_gdctl.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_grid.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_grid.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_html.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_html.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_htmllbox.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_htmllbox.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_hyperlink.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_hyperlink.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_listb.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_listb.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_listbk.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_listbk.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_listc.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_listc.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_mdi.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_mdi.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_menu.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_menu.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_notbk.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_notbk.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_odcombo.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_odcombo.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_panel.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_panel.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_propdlg.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_propdlg.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_radbt.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_radbt.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_radbx.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_radbx.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_scrol.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_scrol.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_scwin.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_scwin.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_simplebook.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_simplebook.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_sizer.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_sizer.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_slidr.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_slidr.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_spin.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_spin.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_split.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_split.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_srchctrl.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_srchctrl.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_statbar.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_statbar.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_stbmp.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_stbmp.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_stbox.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_stbox.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_stlin.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_stlin.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_sttxt.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_sttxt.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_text.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_text.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_tglbtn.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_tglbtn.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_timectrl.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_timectrl.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_toolb.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_toolb.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_toolbk.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_toolbk.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_tree.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_tree.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_treebk.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_treebk.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_unkwn.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_unkwn.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xh_wizrd.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xh_wizrd.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xmladv.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xmladv.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xmlres.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xmlres.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xmlrsall.o: ../../../../../src/Dependencies/wxWidgets/src/xrc/xmlrsall.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"

-include $(OBJECTS:%.o=%.d)
ifneq (,$(PCH))
  -include $(OBJDIR)/$(notdir $(PCH)).d
endif