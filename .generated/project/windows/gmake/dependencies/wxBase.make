# GNU Make project makefile autogenerated by Premake

ifndef config
  config=debug_x64
endif

ifndef verbose
  SILENT = @
endif

.PHONY: clean prebuild prelink

ifeq ($(config),debug_x64)
  RESCOMP = windres
  TARGETDIR = ../../../../build/windows/gmake/output/x64/Debug
  TARGET = $(TARGETDIR)/wxBase64d.dll
  OBJDIR = ../../../../build/windows/gmake/intermediate/x64/Debug/wxBase
  DEFINES += -DUNICODE -D_UNICODE -DEA_COMPILER_NO_RTTI -D_DEBUG -DDEBUG -DWIN32 -D_WINDOWS -DWIN64 -DNOPCH -DWXBUILDING -DwxUSE_ZLIB_H_IN_PATH -D_CRT_SECURE_NO_DEPRECATE=1 -D_CRT_NON_CONFORMING_SWPRINTFS=1 -D_SCL_SECURE_NO_WARNINGS=1 -DXML_STATIC -DWXMAKINGDLL_BASE -D__WXMSW__ -DwxUSE_GUI=0 -DwxUSE_BASE=1
  INCLUDES += -I../../../../../src/Dependencies/wxWidgets/include -I../../../../../src/Dependencies/wxWidgets/include/msvc -I../../../../../src/Dependencies/wxWidgets/src/regex -I../../../../../src/Dependencies/zlib-ng
  FORCE_INCLUDE +=
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -ffast-math -Og -g -Wall -Wextra
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -ffast-math -Og -g -Wall -Wextra -std=c++1z -fno-rtti
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += ../../../../build/windows/gmake/output/x64/Debug/Engine.lib ../../../../build/windows/gmake/output/x64/Debug/Memory64d.lib ../../../../build/windows/gmake/output/x64/Debug/zlib-ng.lib ../../../../build/windows/gmake/output/x64/Debug/wxRegex.lib
  LDDEPS += ../../../../build/windows/gmake/output/x64/Debug/Engine.lib ../../../../build/windows/gmake/output/x64/Debug/Memory64d.lib ../../../../build/windows/gmake/output/x64/Debug/zlib-ng.lib ../../../../build/windows/gmake/output/x64/Debug/wxRegex.lib
  ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib64 -m64 -shared -Wl,--out-implib="../../../../build/windows/gmake/output/x64/Debug/wxBase64d.lib"
  LINKCMD = $(CXX) -o "$@" $(OBJECTS) $(RESOURCES) $(ALL_LDFLAGS) $(LIBS)
  define PREBUILDCMDS
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
	@echo Running postbuild commands
	IF NOT EXIST ..\..\..\..\..\workingdir\bin (mkdir ..\..\..\..\..\workingdir\bin)
	IF EXIST ..\..\..\..\build\windows\gmake\output\x64\Debug\wxBase64d.dll\ (xcopy /Q /E /Y /I ..\..\..\..\build\windows\gmake\output\x64\Debug\wxBase64d.dll ..\..\..\..\..\workingdir\bin > nul) ELSE (xcopy /Q /Y /I ..\..\..\..\build\windows\gmake\output\x64\Debug\wxBase64d.dll ..\..\..\..\..\workingdir\bin > nul)
  endef
all: prebuild prelink $(TARGET)
	@:

endif

ifeq ($(config),release_x64)
  RESCOMP = windres
  TARGETDIR = ../../../../build/windows/gmake/output/x64/Release
  TARGET = $(TARGETDIR)/wxBase64.dll
  OBJDIR = ../../../../build/windows/gmake/intermediate/x64/Release/wxBase
  DEFINES += -DUNICODE -D_UNICODE -DEA_COMPILER_NO_RTTI -DNDEBUG -DWIN32 -D_WINDOWS -DWIN64 -DNOPCH -DWXBUILDING -DwxUSE_ZLIB_H_IN_PATH -D_CRT_SECURE_NO_DEPRECATE=1 -D_CRT_NON_CONFORMING_SWPRINTFS=1 -D_SCL_SECURE_NO_WARNINGS=1 -DXML_STATIC -DWXMAKINGDLL_BASE -D__WXMSW__ -DwxUSE_GUI=0 -DwxUSE_BASE=1
  INCLUDES += -I../../../../../src/Dependencies/wxWidgets/include -I../../../../../src/Dependencies/wxWidgets/include/msvc -I../../../../../src/Dependencies/wxWidgets/src/regex -I../../../../../src/Dependencies/zlib-ng
  FORCE_INCLUDE +=
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -flto -ffast-math -O3 -g -Wall -Wextra
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -flto -ffast-math -O3 -g -Wall -Wextra -std=c++1z -fno-rtti
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += ../../../../build/windows/gmake/output/x64/Release/Engine.lib ../../../../build/windows/gmake/output/x64/Release/Memory64.lib ../../../../build/windows/gmake/output/x64/Release/zlib-ng.lib ../../../../build/windows/gmake/output/x64/Release/wxRegex.lib
  LDDEPS += ../../../../build/windows/gmake/output/x64/Release/Engine.lib ../../../../build/windows/gmake/output/x64/Release/Memory64.lib ../../../../build/windows/gmake/output/x64/Release/zlib-ng.lib ../../../../build/windows/gmake/output/x64/Release/wxRegex.lib
  ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib64 -m64 -flto -shared -Wl,--out-implib="../../../../build/windows/gmake/output/x64/Release/wxBase64.lib"
  LINKCMD = $(CXX) -o "$@" $(OBJECTS) $(RESOURCES) $(ALL_LDFLAGS) $(LIBS)
  define PREBUILDCMDS
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
	@echo Running postbuild commands
	IF NOT EXIST ..\..\..\..\..\workingdir\bin (mkdir ..\..\..\..\..\workingdir\bin)
	IF EXIST ..\..\..\..\build\windows\gmake\output\x64\Release\wxBase64.dll\ (xcopy /Q /E /Y /I ..\..\..\..\build\windows\gmake\output\x64\Release\wxBase64.dll ..\..\..\..\..\workingdir\bin > nul) ELSE (xcopy /Q /Y /I ..\..\..\..\build\windows\gmake\output\x64\Release\wxBase64.dll ..\..\..\..\..\workingdir\bin > nul)
  endef
all: prebuild prelink $(TARGET)
	@:

endif

ifeq ($(config),debug_clang_x64)
  ifeq ($(origin CC), default)
    CC = clang
  endif
  ifeq ($(origin CXX), default)
    CXX = clang++
  endif
  ifeq ($(origin AR), default)
    AR = ar
  endif
  TARGETDIR = ../../../../build/windows/gmake/output/x64/Debug_Clang
  TARGET = $(TARGETDIR)/wxBase64d.dll
  OBJDIR = ../../../../build/windows/gmake/intermediate/x64/Debug_Clang/wxBase
  DEFINES += -DUNICODE -D_UNICODE -DEA_COMPILER_NO_RTTI -D_DEBUG -DDEBUG -DWIN32 -D_WINDOWS -DWIN64 -DNOPCH -DWXBUILDING -DwxUSE_ZLIB_H_IN_PATH -D_CRT_SECURE_NO_DEPRECATE=1 -D_CRT_NON_CONFORMING_SWPRINTFS=1 -D_SCL_SECURE_NO_WARNINGS=1 -DXML_STATIC -DWXMAKINGDLL_BASE -D__WXMSW__ -DwxUSE_GUI=0 -DwxUSE_BASE=1
  INCLUDES += -I../../../../../src/Dependencies/wxWidgets/include -I../../../../../src/Dependencies/wxWidgets/include/msvc -I../../../../../src/Dependencies/wxWidgets/src/regex -I../../../../../src/Dependencies/zlib-ng
  FORCE_INCLUDE +=
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -ffast-math -O0 -g -Wall -Wextra
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -ffast-math -O0 -g -Wall -Wextra -std=c++1z -fno-rtti
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += ../../../../build/windows/gmake/output/x64/Debug_Clang/Engine.lib ../../../../build/windows/gmake/output/x64/Debug_Clang/Memory64d.lib ../../../../build/windows/gmake/output/x64/Debug_Clang/zlib-ng.lib ../../../../build/windows/gmake/output/x64/Debug_Clang/wxRegex.lib
  LDDEPS += ../../../../build/windows/gmake/output/x64/Debug_Clang/Engine.lib ../../../../build/windows/gmake/output/x64/Debug_Clang/Memory64d.lib ../../../../build/windows/gmake/output/x64/Debug_Clang/zlib-ng.lib ../../../../build/windows/gmake/output/x64/Debug_Clang/wxRegex.lib
  ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib64 -m64 -shared -Wl,--out-implib="../../../../build/windows/gmake/output/x64/Debug_Clang/wxBase64d.lib"
  LINKCMD = $(CXX) -o "$@" $(OBJECTS) $(RESOURCES) $(ALL_LDFLAGS) $(LIBS)
  define PREBUILDCMDS
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
	@echo Running postbuild commands
	IF NOT EXIST ..\..\..\..\..\workingdir\bin (mkdir ..\..\..\..\..\workingdir\bin)
	IF EXIST ..\..\..\..\build\windows\gmake\output\x64\Debug_Clang\wxBase64d.dll\ (xcopy /Q /E /Y /I ..\..\..\..\build\windows\gmake\output\x64\Debug_Clang\wxBase64d.dll ..\..\..\..\..\workingdir\bin > nul) ELSE (xcopy /Q /Y /I ..\..\..\..\build\windows\gmake\output\x64\Debug_Clang\wxBase64d.dll ..\..\..\..\..\workingdir\bin > nul)
  endef
all: prebuild prelink $(TARGET)
	@:

endif

ifeq ($(config),release_clang_x64)
  ifeq ($(origin CC), default)
    CC = clang
  endif
  ifeq ($(origin CXX), default)
    CXX = clang++
  endif
  ifeq ($(origin AR), default)
    AR = ar
  endif
  TARGETDIR = ../../../../build/windows/gmake/output/x64/Release_Clang
  TARGET = $(TARGETDIR)/wxBase64.dll
  OBJDIR = ../../../../build/windows/gmake/intermediate/x64/Release_Clang/wxBase
  DEFINES += -DUNICODE -D_UNICODE -DEA_COMPILER_NO_RTTI -DNDEBUG -DWIN32 -D_WINDOWS -DWIN64 -DNOPCH -DWXBUILDING -DwxUSE_ZLIB_H_IN_PATH -D_CRT_SECURE_NO_DEPRECATE=1 -D_CRT_NON_CONFORMING_SWPRINTFS=1 -D_SCL_SECURE_NO_WARNINGS=1 -DXML_STATIC -DWXMAKINGDLL_BASE -D__WXMSW__ -DwxUSE_GUI=0 -DwxUSE_BASE=1
  INCLUDES += -I../../../../../src/Dependencies/wxWidgets/include -I../../../../../src/Dependencies/wxWidgets/include/msvc -I../../../../../src/Dependencies/wxWidgets/src/regex -I../../../../../src/Dependencies/zlib-ng
  FORCE_INCLUDE +=
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -flto -ffast-math -O3 -g -Wall -Wextra
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -flto -ffast-math -O3 -g -Wall -Wextra -std=c++1z -fno-rtti
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += ../../../../build/windows/gmake/output/x64/Release_Clang/Engine.lib ../../../../build/windows/gmake/output/x64/Release_Clang/Memory64.lib ../../../../build/windows/gmake/output/x64/Release_Clang/zlib-ng.lib ../../../../build/windows/gmake/output/x64/Release_Clang/wxRegex.lib
  LDDEPS += ../../../../build/windows/gmake/output/x64/Release_Clang/Engine.lib ../../../../build/windows/gmake/output/x64/Release_Clang/Memory64.lib ../../../../build/windows/gmake/output/x64/Release_Clang/zlib-ng.lib ../../../../build/windows/gmake/output/x64/Release_Clang/wxRegex.lib
  ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib64 -m64 -flto -shared -Wl,--out-implib="../../../../build/windows/gmake/output/x64/Release_Clang/wxBase64.lib"
  LINKCMD = $(CXX) -o "$@" $(OBJECTS) $(RESOURCES) $(ALL_LDFLAGS) $(LIBS)
  define PREBUILDCMDS
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
	@echo Running postbuild commands
	IF NOT EXIST ..\..\..\..\..\workingdir\bin (mkdir ..\..\..\..\..\workingdir\bin)
	IF EXIST ..\..\..\..\build\windows\gmake\output\x64\Release_Clang\wxBase64.dll\ (xcopy /Q /E /Y /I ..\..\..\..\build\windows\gmake\output\x64\Release_Clang\wxBase64.dll ..\..\..\..\..\workingdir\bin > nul) ELSE (xcopy /Q /Y /I ..\..\..\..\build\windows\gmake\output\x64\Release_Clang\wxBase64.dll ..\..\..\..\..\workingdir\bin > nul)
  endef
all: prebuild prelink $(TARGET)
	@:

endif

ifeq ($(config),profile_x64)
  RESCOMP = windres
  TARGETDIR = ../../../../build/windows/gmake/output/x64/Profile
  TARGET = $(TARGETDIR)/wxBase64p.dll
  OBJDIR = ../../../../build/windows/gmake/intermediate/x64/Profile/wxBase
  DEFINES += -DUNICODE -D_UNICODE -DEA_COMPILER_NO_RTTI -DNDEBUG -DSHIB_PROFILE -DWIN32 -D_WINDOWS -DWIN64 -DNOPCH -DWXBUILDING -DwxUSE_ZLIB_H_IN_PATH -D_CRT_SECURE_NO_DEPRECATE=1 -D_CRT_NON_CONFORMING_SWPRINTFS=1 -D_SCL_SECURE_NO_WARNINGS=1 -DXML_STATIC -DWXMAKINGDLL_BASE -D__WXMSW__ -DwxUSE_GUI=0 -DwxUSE_BASE=1
  INCLUDES += -I../../../../../src/Dependencies/wxWidgets/include -I../../../../../src/Dependencies/wxWidgets/include/msvc -I../../../../../src/Dependencies/wxWidgets/src/regex -I../../../../../src/Dependencies/zlib-ng
  FORCE_INCLUDE +=
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -flto -ffast-math -O3 -g -Wall -Wextra
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -flto -ffast-math -O3 -g -Wall -Wextra -std=c++1z -fno-rtti
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += ../../../../build/windows/gmake/output/x64/Profile/Engine.lib ../../../../build/windows/gmake/output/x64/Profile/Memory64p.lib ../../../../build/windows/gmake/output/x64/Profile/zlib-ng.lib ../../../../build/windows/gmake/output/x64/Profile/wxRegex.lib
  LDDEPS += ../../../../build/windows/gmake/output/x64/Profile/Engine.lib ../../../../build/windows/gmake/output/x64/Profile/Memory64p.lib ../../../../build/windows/gmake/output/x64/Profile/zlib-ng.lib ../../../../build/windows/gmake/output/x64/Profile/wxRegex.lib
  ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib64 -m64 -flto -shared -Wl,--out-implib="../../../../build/windows/gmake/output/x64/Profile/wxBase64p.lib"
  LINKCMD = $(CXX) -o "$@" $(OBJECTS) $(RESOURCES) $(ALL_LDFLAGS) $(LIBS)
  define PREBUILDCMDS
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
	@echo Running postbuild commands
	IF NOT EXIST ..\..\..\..\..\workingdir\bin (mkdir ..\..\..\..\..\workingdir\bin)
	IF EXIST ..\..\..\..\build\windows\gmake\output\x64\Profile\wxBase64p.dll\ (xcopy /Q /E /Y /I ..\..\..\..\build\windows\gmake\output\x64\Profile\wxBase64p.dll ..\..\..\..\..\workingdir\bin > nul) ELSE (xcopy /Q /Y /I ..\..\..\..\build\windows\gmake\output\x64\Profile\wxBase64p.dll ..\..\..\..\..\workingdir\bin > nul)
  endef
all: prebuild prelink $(TARGET)
	@:

endif

ifeq ($(config),profile_clang_x64)
  ifeq ($(origin CC), default)
    CC = clang
  endif
  ifeq ($(origin CXX), default)
    CXX = clang++
  endif
  ifeq ($(origin AR), default)
    AR = ar
  endif
  TARGETDIR = ../../../../build/windows/gmake/output/x64/Profile_Clang
  TARGET = $(TARGETDIR)/wxBase64p.dll
  OBJDIR = ../../../../build/windows/gmake/intermediate/x64/Profile_Clang/wxBase
  DEFINES += -DUNICODE -D_UNICODE -DEA_COMPILER_NO_RTTI -DNDEBUG -DWIN32 -D_WINDOWS -DWIN64 -DNOPCH -DWXBUILDING -DwxUSE_ZLIB_H_IN_PATH -D_CRT_SECURE_NO_DEPRECATE=1 -D_CRT_NON_CONFORMING_SWPRINTFS=1 -D_SCL_SECURE_NO_WARNINGS=1 -DXML_STATIC -DWXMAKINGDLL_BASE -D__WXMSW__ -DwxUSE_GUI=0 -DwxUSE_BASE=1
  INCLUDES += -I../../../../../src/Dependencies/wxWidgets/include -I../../../../../src/Dependencies/wxWidgets/include/msvc -I../../../../../src/Dependencies/wxWidgets/src/regex -I../../../../../src/Dependencies/zlib-ng
  FORCE_INCLUDE +=
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -flto -ffast-math -O3 -g -Wall -Wextra
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -flto -ffast-math -O3 -g -Wall -Wextra -std=c++1z -fno-rtti
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += ../../../../build/windows/gmake/output/x64/Profile_Clang/Engine.lib ../../../../build/windows/gmake/output/x64/Profile_Clang/Memory64p.lib ../../../../build/windows/gmake/output/x64/Profile_Clang/zlib-ng.lib ../../../../build/windows/gmake/output/x64/Profile_Clang/wxRegex.lib
  LDDEPS += ../../../../build/windows/gmake/output/x64/Profile_Clang/Engine.lib ../../../../build/windows/gmake/output/x64/Profile_Clang/Memory64p.lib ../../../../build/windows/gmake/output/x64/Profile_Clang/zlib-ng.lib ../../../../build/windows/gmake/output/x64/Profile_Clang/wxRegex.lib
  ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib64 -m64 -flto -shared -Wl,--out-implib="../../../../build/windows/gmake/output/x64/Profile_Clang/wxBase64p.lib"
  LINKCMD = $(CXX) -o "$@" $(OBJECTS) $(RESOURCES) $(ALL_LDFLAGS) $(LIBS)
  define PREBUILDCMDS
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
	@echo Running postbuild commands
	IF NOT EXIST ..\..\..\..\..\workingdir\bin (mkdir ..\..\..\..\..\workingdir\bin)
	IF EXIST ..\..\..\..\build\windows\gmake\output\x64\Profile_Clang\wxBase64p.dll\ (xcopy /Q /E /Y /I ..\..\..\..\build\windows\gmake\output\x64\Profile_Clang\wxBase64p.dll ..\..\..\..\..\workingdir\bin > nul) ELSE (xcopy /Q /Y /I ..\..\..\..\build\windows\gmake\output\x64\Profile_Clang\wxBase64p.dll ..\..\..\..\..\workingdir\bin > nul)
  endef
all: prebuild prelink $(TARGET)
	@:

endif

ifeq ($(config),optimized_debug_x64)
  RESCOMP = windres
  TARGETDIR = ../../../../build/windows/gmake/output/x64/Optimized_Debug
  TARGET = $(TARGETDIR)/wxBase64od.dll
  OBJDIR = ../../../../build/windows/gmake/intermediate/x64/Optimized_Debug/wxBase
  DEFINES += -DUNICODE -D_UNICODE -DEA_COMPILER_NO_RTTI -D_DEBUG -DDEBUG -DWIN32 -D_WINDOWS -DWIN64 -DNOPCH -DWXBUILDING -DwxUSE_ZLIB_H_IN_PATH -D_CRT_SECURE_NO_DEPRECATE=1 -D_CRT_NON_CONFORMING_SWPRINTFS=1 -D_SCL_SECURE_NO_WARNINGS=1 -DXML_STATIC -DWXMAKINGDLL_BASE -D__WXMSW__ -DwxUSE_GUI=0 -DwxUSE_BASE=1
  INCLUDES += -I../../../../../src/Dependencies/wxWidgets/include -I../../../../../src/Dependencies/wxWidgets/include/msvc -I../../../../../src/Dependencies/wxWidgets/src/regex -I../../../../../src/Dependencies/zlib-ng
  FORCE_INCLUDE +=
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -flto -ffast-math -O3 -g -Wall -Wextra
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -flto -ffast-math -O3 -g -Wall -Wextra -std=c++1z -fno-rtti
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += ../../../../build/windows/gmake/output/x64/Optimized_Debug/Engine.lib ../../../../build/windows/gmake/output/x64/Optimized_Debug/Memory64od.lib ../../../../build/windows/gmake/output/x64/Optimized_Debug/zlib-ng.lib ../../../../build/windows/gmake/output/x64/Optimized_Debug/wxRegex.lib
  LDDEPS += ../../../../build/windows/gmake/output/x64/Optimized_Debug/Engine.lib ../../../../build/windows/gmake/output/x64/Optimized_Debug/Memory64od.lib ../../../../build/windows/gmake/output/x64/Optimized_Debug/zlib-ng.lib ../../../../build/windows/gmake/output/x64/Optimized_Debug/wxRegex.lib
  ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib64 -m64 -flto -shared -Wl,--out-implib="../../../../build/windows/gmake/output/x64/Optimized_Debug/wxBase64od.lib"
  LINKCMD = $(CXX) -o "$@" $(OBJECTS) $(RESOURCES) $(ALL_LDFLAGS) $(LIBS)
  define PREBUILDCMDS
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
	@echo Running postbuild commands
	IF NOT EXIST ..\..\..\..\..\workingdir\bin (mkdir ..\..\..\..\..\workingdir\bin)
	IF EXIST ..\..\..\..\build\windows\gmake\output\x64\Optimized_Debug\wxBase64od.dll\ (xcopy /Q /E /Y /I ..\..\..\..\build\windows\gmake\output\x64\Optimized_Debug\wxBase64od.dll ..\..\..\..\..\workingdir\bin > nul) ELSE (xcopy /Q /Y /I ..\..\..\..\build\windows\gmake\output\x64\Optimized_Debug\wxBase64od.dll ..\..\..\..\..\workingdir\bin > nul)
  endef
all: prebuild prelink $(TARGET)
	@:

endif

ifeq ($(config),optimized_debug_clang_x64)
  ifeq ($(origin CC), default)
    CC = clang
  endif
  ifeq ($(origin CXX), default)
    CXX = clang++
  endif
  ifeq ($(origin AR), default)
    AR = ar
  endif
  TARGETDIR = ../../../../build/windows/gmake/output/x64/Optimized_Debug_Clang
  TARGET = $(TARGETDIR)/wxBase64od.dll
  OBJDIR = ../../../../build/windows/gmake/intermediate/x64/Optimized_Debug_Clang/wxBase
  DEFINES += -DUNICODE -D_UNICODE -DEA_COMPILER_NO_RTTI -D_DEBUG -DDEBUG -DWIN32 -D_WINDOWS -DWIN64 -DNOPCH -DWXBUILDING -DwxUSE_ZLIB_H_IN_PATH -D_CRT_SECURE_NO_DEPRECATE=1 -D_CRT_NON_CONFORMING_SWPRINTFS=1 -D_SCL_SECURE_NO_WARNINGS=1 -DXML_STATIC -DWXMAKINGDLL_BASE -D__WXMSW__ -DwxUSE_GUI=0 -DwxUSE_BASE=1
  INCLUDES += -I../../../../../src/Dependencies/wxWidgets/include -I../../../../../src/Dependencies/wxWidgets/include/msvc -I../../../../../src/Dependencies/wxWidgets/src/regex -I../../../../../src/Dependencies/zlib-ng
  FORCE_INCLUDE +=
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -flto -ffast-math -O3 -g -Wall -Wextra
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -flto -ffast-math -O3 -g -Wall -Wextra -std=c++1z -fno-rtti
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += ../../../../build/windows/gmake/output/x64/Optimized_Debug_Clang/Engine.lib ../../../../build/windows/gmake/output/x64/Optimized_Debug_Clang/Memory64od.lib ../../../../build/windows/gmake/output/x64/Optimized_Debug_Clang/zlib-ng.lib ../../../../build/windows/gmake/output/x64/Optimized_Debug_Clang/wxRegex.lib
  LDDEPS += ../../../../build/windows/gmake/output/x64/Optimized_Debug_Clang/Engine.lib ../../../../build/windows/gmake/output/x64/Optimized_Debug_Clang/Memory64od.lib ../../../../build/windows/gmake/output/x64/Optimized_Debug_Clang/zlib-ng.lib ../../../../build/windows/gmake/output/x64/Optimized_Debug_Clang/wxRegex.lib
  ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib64 -m64 -flto -shared -Wl,--out-implib="../../../../build/windows/gmake/output/x64/Optimized_Debug_Clang/wxBase64od.lib"
  LINKCMD = $(CXX) -o "$@" $(OBJECTS) $(RESOURCES) $(ALL_LDFLAGS) $(LIBS)
  define PREBUILDCMDS
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
	@echo Running postbuild commands
	IF NOT EXIST ..\..\..\..\..\workingdir\bin (mkdir ..\..\..\..\..\workingdir\bin)
	IF EXIST ..\..\..\..\build\windows\gmake\output\x64\Optimized_Debug_Clang\wxBase64od.dll\ (xcopy /Q /E /Y /I ..\..\..\..\build\windows\gmake\output\x64\Optimized_Debug_Clang\wxBase64od.dll ..\..\..\..\..\workingdir\bin > nul) ELSE (xcopy /Q /Y /I ..\..\..\..\build\windows\gmake\output\x64\Optimized_Debug_Clang\wxBase64od.dll ..\..\..\..\..\workingdir\bin > nul)
  endef
all: prebuild prelink $(TARGET)
	@:

endif

OBJECTS := \
	$(OBJDIR)/any.o \
	$(OBJDIR)/appbase.o \
	$(OBJDIR)/arcall.o \
	$(OBJDIR)/arcfind.o \
	$(OBJDIR)/archive.o \
	$(OBJDIR)/arrstr.o \
	$(OBJDIR)/base64.o \
	$(OBJDIR)/clntdata.o \
	$(OBJDIR)/cmdline.o \
	$(OBJDIR)/config.o \
	$(OBJDIR)/convauto.o \
	$(OBJDIR)/datetime.o \
	$(OBJDIR)/datetimefmt.o \
	$(OBJDIR)/datstrm.o \
	$(OBJDIR)/dircmn.o \
	$(OBJDIR)/dummy.o \
	$(OBJDIR)/dynarray.o \
	$(OBJDIR)/dynlib.o \
	$(OBJDIR)/dynload.o \
	$(OBJDIR)/encconv.o \
	$(OBJDIR)/event.o \
	$(OBJDIR)/evtloopcmn.o \
	$(OBJDIR)/extended.o \
	$(OBJDIR)/ffile.o \
	$(OBJDIR)/file.o \
	$(OBJDIR)/fileback.o \
	$(OBJDIR)/fileconf.o \
	$(OBJDIR)/filefn.o \
	$(OBJDIR)/filename.o \
	$(OBJDIR)/filesys.o \
	$(OBJDIR)/filtall.o \
	$(OBJDIR)/filtfind.o \
	$(OBJDIR)/fmapbase.o \
	$(OBJDIR)/fs_arc.o \
	$(OBJDIR)/fs_filter.o \
	$(OBJDIR)/fs_mem.o \
	$(OBJDIR)/fswatchercmn.o \
	$(OBJDIR)/hash.o \
	$(OBJDIR)/hashmap.o \
	$(OBJDIR)/init.o \
	$(OBJDIR)/intl.o \
	$(OBJDIR)/ipcbase.o \
	$(OBJDIR)/languageinfo.o \
	$(OBJDIR)/list.o \
	$(OBJDIR)/log.o \
	$(OBJDIR)/longlong.o \
	$(OBJDIR)/memory.o \
	$(OBJDIR)/mimecmn.o \
	$(OBJDIR)/module.o \
	$(OBJDIR)/msgout.o \
	$(OBJDIR)/mstream.o \
	$(OBJDIR)/numformatter.o \
	$(OBJDIR)/object.o \
	$(OBJDIR)/platinfo.o \
	$(OBJDIR)/powercmn.o \
	$(OBJDIR)/process.o \
	$(OBJDIR)/regex.o \
	$(OBJDIR)/sstream.o \
	$(OBJDIR)/stdpbase.o \
	$(OBJDIR)/stdstream.o \
	$(OBJDIR)/stopwatch.o \
	$(OBJDIR)/strconv.o \
	$(OBJDIR)/stream.o \
	$(OBJDIR)/string.o \
	$(OBJDIR)/stringimpl.o \
	$(OBJDIR)/stringops.o \
	$(OBJDIR)/strvararg.o \
	$(OBJDIR)/sysopt.o \
	$(OBJDIR)/tarstrm.o \
	$(OBJDIR)/textbuf.o \
	$(OBJDIR)/textfile.o \
	$(OBJDIR)/threadinfo.o \
	$(OBJDIR)/time.o \
	$(OBJDIR)/timercmn.o \
	$(OBJDIR)/timerimpl.o \
	$(OBJDIR)/tokenzr.o \
	$(OBJDIR)/translation.o \
	$(OBJDIR)/txtstrm.o \
	$(OBJDIR)/unichar.o \
	$(OBJDIR)/uri.o \
	$(OBJDIR)/ustring.o \
	$(OBJDIR)/utilscmn.o \
	$(OBJDIR)/variant.o \
	$(OBJDIR)/wfstream.o \
	$(OBJDIR)/wxcrt.o \
	$(OBJDIR)/wxprintf.o \
	$(OBJDIR)/xlocale.o \
	$(OBJDIR)/xti.o \
	$(OBJDIR)/xtistrm.o \
	$(OBJDIR)/zipstrm.o \
	$(OBJDIR)/zstream.o \
	$(OBJDIR)/fswatcherg.o \
	$(OBJDIR)/basemsw.o \
	$(OBJDIR)/crashrpt.o \
	$(OBJDIR)/dde.o \
	$(OBJDIR)/debughlp.o \
	$(OBJDIR)/dir.o \
	$(OBJDIR)/dlmsw.o \
	$(OBJDIR)/evtloopconsole.o \
	$(OBJDIR)/fswatcher.o \
	$(OBJDIR)/main.o \
	$(OBJDIR)/mimetype.o \
	$(OBJDIR)/mslu.o \
	$(OBJDIR)/power.o \
	$(OBJDIR)/regconf.o \
	$(OBJDIR)/registry.o \
	$(OBJDIR)/snglinst.o \
	$(OBJDIR)/stackwalk.o \
	$(OBJDIR)/stdpaths.o \
	$(OBJDIR)/thread.o \
	$(OBJDIR)/timer.o \
	$(OBJDIR)/utils.o \
	$(OBJDIR)/utilsexc.o \
	$(OBJDIR)/volume.o \

RESOURCES := \

CUSTOMFILES := \

SHELLTYPE := msdos
ifeq (,$(ComSpec)$(COMSPEC))
  SHELLTYPE := posix
endif
ifeq (/bin,$(findstring /bin,$(SHELL)))
  SHELLTYPE := posix
endif

$(TARGET): $(GCH) ${CUSTOMFILES} $(OBJECTS) $(LDDEPS) $(RESOURCES)
	@echo Linking wxBase
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(TARGETDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(TARGETDIR))
endif
	$(SILENT) $(LINKCMD)
	$(POSTBUILDCMDS)

clean:
	@echo Cleaning wxBase
ifeq (posix,$(SHELLTYPE))
	$(SILENT) rm -f  $(TARGET)
	$(SILENT) rm -rf $(OBJDIR)
else
	$(SILENT) if exist $(subst /,\\,$(TARGET)) del $(subst /,\\,$(TARGET))
	$(SILENT) if exist $(subst /,\\,$(OBJDIR)) rmdir /s /q $(subst /,\\,$(OBJDIR))
endif

prebuild:
	$(PREBUILDCMDS)

prelink:
	$(PRELINKCMDS)

ifneq (,$(PCH))
$(OBJECTS): $(GCH) $(PCH)
$(GCH): $(PCH)
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) -x c++-header $(ALL_CXXFLAGS) -o "$@" -MF "$(@:%.gch=%.d)" -c "$<"
endif

$(OBJDIR)/any.o: ../../../../../src/Dependencies/wxWidgets/src/common/any.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/appbase.o: ../../../../../src/Dependencies/wxWidgets/src/common/appbase.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/arcall.o: ../../../../../src/Dependencies/wxWidgets/src/common/arcall.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/arcfind.o: ../../../../../src/Dependencies/wxWidgets/src/common/arcfind.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/archive.o: ../../../../../src/Dependencies/wxWidgets/src/common/archive.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/arrstr.o: ../../../../../src/Dependencies/wxWidgets/src/common/arrstr.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/base64.o: ../../../../../src/Dependencies/wxWidgets/src/common/base64.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/clntdata.o: ../../../../../src/Dependencies/wxWidgets/src/common/clntdata.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/cmdline.o: ../../../../../src/Dependencies/wxWidgets/src/common/cmdline.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/config.o: ../../../../../src/Dependencies/wxWidgets/src/common/config.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/convauto.o: ../../../../../src/Dependencies/wxWidgets/src/common/convauto.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/datetime.o: ../../../../../src/Dependencies/wxWidgets/src/common/datetime.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/datetimefmt.o: ../../../../../src/Dependencies/wxWidgets/src/common/datetimefmt.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/datstrm.o: ../../../../../src/Dependencies/wxWidgets/src/common/datstrm.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/dircmn.o: ../../../../../src/Dependencies/wxWidgets/src/common/dircmn.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/dummy.o: ../../../../../src/Dependencies/wxWidgets/src/common/dummy.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/dynarray.o: ../../../../../src/Dependencies/wxWidgets/src/common/dynarray.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/dynlib.o: ../../../../../src/Dependencies/wxWidgets/src/common/dynlib.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/dynload.o: ../../../../../src/Dependencies/wxWidgets/src/common/dynload.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/encconv.o: ../../../../../src/Dependencies/wxWidgets/src/common/encconv.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/event.o: ../../../../../src/Dependencies/wxWidgets/src/common/event.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/evtloopcmn.o: ../../../../../src/Dependencies/wxWidgets/src/common/evtloopcmn.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/extended.o: ../../../../../src/Dependencies/wxWidgets/src/common/extended.c
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/ffile.o: ../../../../../src/Dependencies/wxWidgets/src/common/ffile.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/file.o: ../../../../../src/Dependencies/wxWidgets/src/common/file.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/fileback.o: ../../../../../src/Dependencies/wxWidgets/src/common/fileback.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/fileconf.o: ../../../../../src/Dependencies/wxWidgets/src/common/fileconf.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/filefn.o: ../../../../../src/Dependencies/wxWidgets/src/common/filefn.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/filename.o: ../../../../../src/Dependencies/wxWidgets/src/common/filename.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/filesys.o: ../../../../../src/Dependencies/wxWidgets/src/common/filesys.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/filtall.o: ../../../../../src/Dependencies/wxWidgets/src/common/filtall.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/filtfind.o: ../../../../../src/Dependencies/wxWidgets/src/common/filtfind.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/fmapbase.o: ../../../../../src/Dependencies/wxWidgets/src/common/fmapbase.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/fs_arc.o: ../../../../../src/Dependencies/wxWidgets/src/common/fs_arc.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/fs_filter.o: ../../../../../src/Dependencies/wxWidgets/src/common/fs_filter.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/fs_mem.o: ../../../../../src/Dependencies/wxWidgets/src/common/fs_mem.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/fswatchercmn.o: ../../../../../src/Dependencies/wxWidgets/src/common/fswatchercmn.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/hash.o: ../../../../../src/Dependencies/wxWidgets/src/common/hash.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/hashmap.o: ../../../../../src/Dependencies/wxWidgets/src/common/hashmap.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/init.o: ../../../../../src/Dependencies/wxWidgets/src/common/init.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/intl.o: ../../../../../src/Dependencies/wxWidgets/src/common/intl.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/ipcbase.o: ../../../../../src/Dependencies/wxWidgets/src/common/ipcbase.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/languageinfo.o: ../../../../../src/Dependencies/wxWidgets/src/common/languageinfo.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/list.o: ../../../../../src/Dependencies/wxWidgets/src/common/list.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/log.o: ../../../../../src/Dependencies/wxWidgets/src/common/log.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/longlong.o: ../../../../../src/Dependencies/wxWidgets/src/common/longlong.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/memory.o: ../../../../../src/Dependencies/wxWidgets/src/common/memory.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/mimecmn.o: ../../../../../src/Dependencies/wxWidgets/src/common/mimecmn.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/module.o: ../../../../../src/Dependencies/wxWidgets/src/common/module.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/msgout.o: ../../../../../src/Dependencies/wxWidgets/src/common/msgout.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/mstream.o: ../../../../../src/Dependencies/wxWidgets/src/common/mstream.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/numformatter.o: ../../../../../src/Dependencies/wxWidgets/src/common/numformatter.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/object.o: ../../../../../src/Dependencies/wxWidgets/src/common/object.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/platinfo.o: ../../../../../src/Dependencies/wxWidgets/src/common/platinfo.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/powercmn.o: ../../../../../src/Dependencies/wxWidgets/src/common/powercmn.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/process.o: ../../../../../src/Dependencies/wxWidgets/src/common/process.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/regex.o: ../../../../../src/Dependencies/wxWidgets/src/common/regex.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/sstream.o: ../../../../../src/Dependencies/wxWidgets/src/common/sstream.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/stdpbase.o: ../../../../../src/Dependencies/wxWidgets/src/common/stdpbase.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/stdstream.o: ../../../../../src/Dependencies/wxWidgets/src/common/stdstream.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/stopwatch.o: ../../../../../src/Dependencies/wxWidgets/src/common/stopwatch.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/strconv.o: ../../../../../src/Dependencies/wxWidgets/src/common/strconv.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/stream.o: ../../../../../src/Dependencies/wxWidgets/src/common/stream.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/string.o: ../../../../../src/Dependencies/wxWidgets/src/common/string.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/stringimpl.o: ../../../../../src/Dependencies/wxWidgets/src/common/stringimpl.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/stringops.o: ../../../../../src/Dependencies/wxWidgets/src/common/stringops.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/strvararg.o: ../../../../../src/Dependencies/wxWidgets/src/common/strvararg.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/sysopt.o: ../../../../../src/Dependencies/wxWidgets/src/common/sysopt.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/tarstrm.o: ../../../../../src/Dependencies/wxWidgets/src/common/tarstrm.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/textbuf.o: ../../../../../src/Dependencies/wxWidgets/src/common/textbuf.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/textfile.o: ../../../../../src/Dependencies/wxWidgets/src/common/textfile.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/threadinfo.o: ../../../../../src/Dependencies/wxWidgets/src/common/threadinfo.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/time.o: ../../../../../src/Dependencies/wxWidgets/src/common/time.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/timercmn.o: ../../../../../src/Dependencies/wxWidgets/src/common/timercmn.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/timerimpl.o: ../../../../../src/Dependencies/wxWidgets/src/common/timerimpl.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/tokenzr.o: ../../../../../src/Dependencies/wxWidgets/src/common/tokenzr.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/translation.o: ../../../../../src/Dependencies/wxWidgets/src/common/translation.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/txtstrm.o: ../../../../../src/Dependencies/wxWidgets/src/common/txtstrm.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/unichar.o: ../../../../../src/Dependencies/wxWidgets/src/common/unichar.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/uri.o: ../../../../../src/Dependencies/wxWidgets/src/common/uri.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/ustring.o: ../../../../../src/Dependencies/wxWidgets/src/common/ustring.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/utilscmn.o: ../../../../../src/Dependencies/wxWidgets/src/common/utilscmn.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/variant.o: ../../../../../src/Dependencies/wxWidgets/src/common/variant.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/wfstream.o: ../../../../../src/Dependencies/wxWidgets/src/common/wfstream.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/wxcrt.o: ../../../../../src/Dependencies/wxWidgets/src/common/wxcrt.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/wxprintf.o: ../../../../../src/Dependencies/wxWidgets/src/common/wxprintf.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xlocale.o: ../../../../../src/Dependencies/wxWidgets/src/common/xlocale.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xti.o: ../../../../../src/Dependencies/wxWidgets/src/common/xti.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/xtistrm.o: ../../../../../src/Dependencies/wxWidgets/src/common/xtistrm.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/zipstrm.o: ../../../../../src/Dependencies/wxWidgets/src/common/zipstrm.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/zstream.o: ../../../../../src/Dependencies/wxWidgets/src/common/zstream.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/fswatcherg.o: ../../../../../src/Dependencies/wxWidgets/src/generic/fswatcherg.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/basemsw.o: ../../../../../src/Dependencies/wxWidgets/src/msw/basemsw.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/crashrpt.o: ../../../../../src/Dependencies/wxWidgets/src/msw/crashrpt.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/dde.o: ../../../../../src/Dependencies/wxWidgets/src/msw/dde.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/debughlp.o: ../../../../../src/Dependencies/wxWidgets/src/msw/debughlp.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/dir.o: ../../../../../src/Dependencies/wxWidgets/src/msw/dir.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/dlmsw.o: ../../../../../src/Dependencies/wxWidgets/src/msw/dlmsw.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/evtloopconsole.o: ../../../../../src/Dependencies/wxWidgets/src/msw/evtloopconsole.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/fswatcher.o: ../../../../../src/Dependencies/wxWidgets/src/msw/fswatcher.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/main.o: ../../../../../src/Dependencies/wxWidgets/src/msw/main.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/mimetype.o: ../../../../../src/Dependencies/wxWidgets/src/msw/mimetype.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/mslu.o: ../../../../../src/Dependencies/wxWidgets/src/msw/mslu.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/power.o: ../../../../../src/Dependencies/wxWidgets/src/msw/power.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/regconf.o: ../../../../../src/Dependencies/wxWidgets/src/msw/regconf.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/registry.o: ../../../../../src/Dependencies/wxWidgets/src/msw/registry.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/snglinst.o: ../../../../../src/Dependencies/wxWidgets/src/msw/snglinst.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/stackwalk.o: ../../../../../src/Dependencies/wxWidgets/src/msw/stackwalk.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/stdpaths.o: ../../../../../src/Dependencies/wxWidgets/src/msw/stdpaths.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/thread.o: ../../../../../src/Dependencies/wxWidgets/src/msw/thread.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/timer.o: ../../../../../src/Dependencies/wxWidgets/src/msw/timer.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/utils.o: ../../../../../src/Dependencies/wxWidgets/src/msw/utils.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/utilsexc.o: ../../../../../src/Dependencies/wxWidgets/src/msw/utilsexc.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/volume.o: ../../../../../src/Dependencies/wxWidgets/src/msw/volume.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"

-include $(OBJECTS:%.o=%.d)
ifneq (,$(PCH))
  -include $(OBJDIR)/$(notdir $(PCH)).d
endif